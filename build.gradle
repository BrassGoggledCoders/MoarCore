buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

repositories {
    maven {
        name "Base/MoU/IE"
        url "http://blamejared.com/maven"
    }
    maven {
        name 'Waila'
        url 'http://mobiusstrip.eu/maven'
    }
    maven {
        name 'JEI'
        url "http://dvs1.progwml6.com/files/maven"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

version = getVersion()

group = "xyz.brassgoggledcoders.opentransport"
archivesBaseName = "OpenTransport"

minecraft {
    version = "${minecraft_version}-${forge_version}"

    mappings = "${mappings_version}"
    runDir = "run/"
    useDepAts = true

    replace "@VERSION@", project.version
    replaceIn "OpenTransport.java"

    replace "base@[0.0.0,)", "base@[" + base_version + ",)"
    replaceIn "OpenTransport.java"
}

dependencies {
    compile "com.teamacronymcoders.base:base:${minecraft_version}-${base_version}:deobf"
    deobfCompile "cpw.mods:ironchest:${minecraft_version}-${iron_chest_version}"
    deobfCompile "xyz.brassgoggledcoders.modularutilities:ModularUtilities:${minecraft_version}-${modular_utilities_version}"
    deobfCompile "mezz.jei:jei_${minecraft_version}:${jei_version}"
    deobfCompile "slimeknights:TConstruct:${minecraft_version}-${tinkers_version}"
    deobfCompile "slimeknights.mantle:Mantle:${minecraft_version}-${mantle_version}"
    compile "blusunrize:ImmersiveEngineering:${immersive_engineering_version}-+:deobf"
}

task getLibraries {
    def libsFolder = new File('libs')
    if (!libsFolder.isDirectory()) {
        libsFolder.mkdirs()
    }

    def downloads = new ArrayList<Tuple>()

    def railcraft = 'Railcraft_' + minecraft_version + '-' + railcraft_version + '-dev.jar'
    def railcraftSource = 'http://www.railcraft.info/ivy/com.headlamp-games/Railcraft/' + railcraft_version + '/' + railcraft

    downloads.add(new Tuple(railcraft, railcraftSource))

    libsFolder.listFiles().each { file ->
        def isInDownloadList = false;
        downloads.each { download ->
            if (file.name == download.get(0).toString()) {
                isInDownloadList = true;
            }
        }
        if (!isInDownloadList || file.size() < 5) {
            println "Deleting file " + file.name
            file.delete();
        }
    }

    downloads.each { download ->
        def fileLocation = new File('libs', download.get(0).toString())
        if (!fileLocation.exists()) {
            def downloadString = download.get(1).toString()
            if (downloadString.contains(" ")) {
                downloadString = downloadString.replace(" ", "%20");
            }
            if (!downloadString.equals("")) {
                println "Downloading " + download.get(0).toString()
                fileLocation.withOutputStream { out ->
                    new URL(downloadString).withInputStream { from ->
                        out << from;
                    }
                }
            }
        }
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

processResources
        {
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                expand 'version': project.version, 'mcversion': project.minecraft.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

jar {
    classifier = ""
}

task deobfJar(type: Jar) {
    from(sourceSets.main.output) {
        classifier = "deobf"
    }
}

artifacts {
    archives deobfJar
}

idea {
    module {
        inheritOutputDirs = true
    }
}

apply plugin: 'maven'
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://" + (System.getenv("local_maven") != null ? System.getenv("local_maven") : System.getenv("bamboo_local_maven")))
            pom {
                groupId = project.group
                version = project.version
                artifactId = project.archivesBaseName
                project {
                    name project.archivesBaseName
                    packaging 'jar'
                    description project.archivesBaseName
                    url ''
                    scm {
                        url 'https://github.com/BrassGoggledCoders/OpenTransport'
                        connection 'scm:git:git@github.com:BrassGoggledCoders/OpenTransport.git'
                        developerConnection 'scm:git:git@github.com:BrassGoggledCoders/OpenTransport.git'
                    }
                    issueManagement {
                        system 'github'
                        url 'https://github.com/BrassGoggledCoders/OpenTransport/issues'
                    }
                    licenses {
                        license {
                            name 'MIT'
                            url 'https://github.com/BrassGoggledCoders/OpenTransport/blob/master/LICENSE'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'SkySom'
                            name 'SkySom'
                            roles { role 'developer' }
                        }
                    }
                }
            }
        }
    }
}

String getVersion() {
    String version = "${minecraft_version}-${opentransport_version}"
    String branch = System.getenv("BRANCH") != null ? System.getenv("BRANCH") : ""

    if(branch != "") {
        version += "-" + branch

        String buildNumber = getBuildNumber()
        if(buildNumber != "") {
            version += "." + buildNumber
        }
    }

    return version
}

static String getBuildNumber() {
    String buildNumber = System.getenv("BUILD_NUMBER") != null ? System.getenv("BUILD_NUMBER") : ""
    if(buildNumber == "") {
        buildNumber = System.getenv("bamboo_buildNumber") != null ? "." + System.getenv("bamboo_buildNumber") : ""
    }
    return buildNumber
}

